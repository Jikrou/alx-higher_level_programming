# Test Cases for matrix_divided function:
# The test cases cover both valid and invalid inputs to ensure the function behave as expected

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Valid Input Cases

#Case 1: Valid input with integers
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

# Case 2: Valid input with floats
>>> matrix_divided([[1.5, 2.5, 3.5], [4.5, 5.5, 6.5], [7.5, 8.5, 9.5]], 2)
[[0.75, 1.25, 1.75], [2.25, 2.75, 3.25], [3.75, 4.25, 4.75]]

# Invalid Input Cases

#Case 3: Empty matrix
>>> matrix_divided([], 2)
Traceback (most recent call last):
	raise TypeError(err_msg)
TypeError: matrix must be a matrix (list of lists) of integers/floats

#Case 4: Matrix with rows of different sizes
>>> matrix_divided([[1, 2, 3], [4, 5], [6, 7, 8]], 2)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size

#Case 5: Non-numeric divisor
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], "a")
Traceback (most recent call last):
	...
TypeError: div must be a number

#Case 6: Division by zero
>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0)
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero
